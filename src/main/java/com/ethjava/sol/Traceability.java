package com.ethjava.sol;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.4.0.
 */
public class Traceability extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ARTTRANSFER = "artTransfer";

    public static final String FUNC_CATEGORYSTEPDATA = "categoryStepData";

    public static final String FUNC_SETARTISTINFOR = "setArtistInfor";

    public static final String FUNC_GETEXCHANGEEQUITYSETP = "getExchangeEquitySetp";

    public static final String FUNC_GETTRANSINFO = "getTransInfo";

    public static final String FUNC_SETEXCHANGEEQUITYSETP = "setExchangeEquitySetp";

    public static final String FUNC_ARTISTINFO = "artistInfo";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_SETTRANSFER = "setTransfer";

    public static final Event SETARTISTINFO_EVENT = new Event("SetArtistInfo", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("transferEvent", 
            Arrays.<TypeReference<?>>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Traceability(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Traceability(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<byte[]> artTransfer(byte[] param0) {
        final Function function = new Function(FUNC_ARTTRANSFER, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> categoryStepData(BigInteger param0) {
        final Function function = new Function(FUNC_CATEGORYSTEPDATA, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setArtistInfor(byte[] ipfsHash, BigInteger artistId, String artistName, String date, String note, String artTitle, String tecSkill, String specification) {
        final Function function = new Function(
                FUNC_SETARTISTINFOR, 
                Arrays.<Type>asList(new Bytes32(ipfsHash),
                new Uint256(artistId),
                new Utf8String(artistName),
                new Utf8String(date),
                new Utf8String(note),
                new Utf8String(artTitle),
                new Utf8String(tecSkill),
                new Utf8String(specification)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getExchangeEquitySetp(BigInteger _artworkId) {
        final Function function = new Function(FUNC_GETEXCHANGEEQUITYSETP, 
                Arrays.<Type>asList(new Uint256(_artworkId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getTransInfo(byte[] _ipfsHash) {
        final Function function = new Function(FUNC_GETTRANSINFO, 
                Arrays.<Type>asList(new Bytes32(_ipfsHash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setExchangeEquitySetp(BigInteger _artworkId, String _artistId, String _artistName, String _equityTitle, String _stepName, String _constTime, String _createTime, String _note) {
        final Function function = new Function(
                FUNC_SETEXCHANGEEQUITYSETP, 
                Arrays.<Type>asList(new Uint256(_artworkId),
                new Utf8String(_artistId),
                new Utf8String(_artistName),
                new Utf8String(_equityTitle),
                new Utf8String(_stepName),
                new Utf8String(_constTime),
                new Utf8String(_createTime),
                new Utf8String(_note)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<BigInteger, BigInteger, String, String, String, BigInteger, String, String, String>> artistInfo(byte[] param0) {
        final Function function = new Function(FUNC_ARTISTINFO, 
                Arrays.<Type>asList(new Bytes32(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple9<BigInteger, BigInteger, String, String, String, BigInteger, String, String, String>>(
                new Callable<Tuple9<BigInteger, BigInteger, String, String, String, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, String, String, String, BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, String, String, String, BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTransfer(byte[] _ipfsHash, String _sellerMemberId, String _seller, String _buyerMemberId, String _buyer, String _sellTime, String _note) {
        final Function function = new Function(
                FUNC_SETTRANSFER, 
                Arrays.<Type>asList(new Bytes32(_ipfsHash),
                new Utf8String(_sellerMemberId),
                new Utf8String(_seller),
                new Utf8String(_buyerMemberId),
                new Utf8String(_buyer),
                new Utf8String(_sellTime),
                new Utf8String(_note)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Traceability> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Traceability.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Traceability> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Traceability.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<SetArtistInfoEventResponse> getSetArtistInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETARTISTINFO_EVENT, transactionReceipt);
        ArrayList<SetArtistInfoEventResponse> responses = new ArrayList<SetArtistInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetArtistInfoEventResponse typedResponse = new SetArtistInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.artistId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.artistName = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.date = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.note = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetArtistInfoEventResponse> setArtistInfoEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetArtistInfoEventResponse>() {
            @Override
            public SetArtistInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETARTISTINFO_EVENT, log);
                SetArtistInfoEventResponse typedResponse = new SetArtistInfoEventResponse();
                typedResponse.log = log;
                typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.artistId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.artistName = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.date = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.note = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SetArtistInfoEventResponse> setArtistInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETARTISTINFO_EVENT));
        return setArtistInfoEventObservable(filter);
    }

    public List<TransferEventEventResponse> getTransferEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._seller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._sellTime = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._note = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventEventResponse> transferEventEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventEventResponse>() {
            @Override
            public TransferEventEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFEREVENT_EVENT, log);
                TransferEventEventResponse typedResponse = new TransferEventEventResponse();
                typedResponse.log = log;
                typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._seller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._buyer = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._sellTime = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._note = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventEventResponse> transferEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFEREVENT_EVENT));
        return transferEventEventObservable(filter);
    }

    public static Traceability load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Traceability(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Traceability load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Traceability(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class SetArtistInfoEventResponse {
        public Log log;

        public byte[] hash;

        public BigInteger artistId;

        public String artistName;

        public String date;

        public String note;
    }

    public static class TransferEventEventResponse {
        public Log log;

        public byte[] hash;

        public String _seller;

        public String _buyer;

        public String _sellTime;

        public String _note;
    }
}
